{"version":3,"sources":["utils/utils.tsx","componets/inputSelect/InputSelect.tsx","componets/formLabel/FormLabel.tsx","componets/formBox/FormBox.tsx","componets/inputText/InputText.tsx","componets/button/Button.tsx","componets/searchBox/SearchBox.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["utils","e2eString","str","replace","toLowerCase","InputSelect","_ref","name","selector","disabled","onSelectItem","value","options","react_default","a","createElement","data-testid","onChange","ev","target","className","id","concat","length","map","option","index","Utils","key","Label","react","htmlFor","this","props","text","children","React","FormBox","_React$PureComponent","_getPrototypeOf2","_this","Object","classCallCheck","_len","arguments","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","displayBorder","addBorder","borderColor","inherits","createClass","style","borderBottom","borderTop","InputText","onChangeValue","type","e","Button","SearchBox","_useState","useState","process","url","slicedToArray","_useState3","brand","model","keyword","brandList","modelList","_useState4","state","setState","_useState5","_useState6","data","setData","_useState7","_useState8","isLoading","setIsLoading","prevState","objectSpread","defineProperty","useEffect","asyncToGenerator","regenerator_default","mark","_callee","res","json","wrap","_context","prev","next","fetch","sent","x","sort","stop","fetchData","findModels","find","models","validForm","Fragment","onSubmit","formEvent","preventDefault","alert","JSON","stringify","FormBox_FormBox","assign","FormLabel_Label","componets_inputSelect_InputSelect","componets_inputText_InputText","Button_Button","SearchForm","componets_searchBox_SearchBox","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iYAAeA,SAEJ,CACHC,UAFc,SAACC,GAAD,OAAiBA,EAAIC,QAAQ,OAAQ,KAAKC,iBCqBjDC,EAViD,SAAAC,GAA8D,IAA5DC,EAA4DD,EAA5DC,KAAMC,EAAsDF,EAAtDE,SAAUC,EAA4CH,EAA5CG,SAAUC,EAAkCJ,EAAlCI,aAAcC,EAAoBL,EAApBK,MAAOC,EAAaN,EAAbM,QAC/G,OAAOC,EAAAC,EAAAC,cAAA,UAAQC,cAAaR,EAAUD,KAAMA,EAAMI,MAAOA,EAAOM,SAAU,SAACC,GAAD,OAAQR,EAAaQ,EAAGC,OAAOR,QAAQF,SAAUA,EAAUW,UAAU,cAAcC,GAAIb,GACjKK,EAAAC,EAAAC,cAAA,UAAQC,cAAA,GAAAM,OAAgBd,EAAhB,gBAAwCG,MAAM,IAAtD,qBACEC,GAAWA,EAAQW,OAAS,GAAMX,EAAQY,IAAK,SAACC,EAAQC,GAAT,OAC/Cb,EAAAC,EAAAC,cAAA,UAAQC,cAAA,GAAAM,OAAgBd,EAAhB,YAAAc,OAAmCK,EAAM1B,UAAUwB,IAAWG,IAAKF,EAAOf,MAAOc,GAASA,0CCRjFI,0LAEjB,OACEC,EAAA,cAACA,EAAA,SAAD,KACEA,EAAA,uBAAOV,UAAU,YAAYW,QAASC,KAAKC,MAAMzB,UACjDsB,EAAA,4BAASE,KAAKC,MAAMC,OAEnBF,KAAKC,MAAME,iBAPeC,kBCAtBC,SAAb,SAAAC,GAAA,SAAAD,IAAA,IAAAE,EAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAT,KAAAK,GAAA,QAAAM,EAAAC,UAAArB,OAAAsB,EAAA,IAAAC,MAAAH,GAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAAAF,EAAAE,GAAAH,UAAAG,GAAA,OAAAP,EAAAC,OAAAO,EAAA,EAAAP,CAAAT,MAAAO,EAAAE,OAAAQ,EAAA,EAAAR,CAAAJ,IAAAa,KAAAC,MAAAZ,EAAA,CAAAP,MAAAV,OAAAuB,MAEIO,cAAgB,SAACC,GAAD,OAAwBA,EAAS,aAAA/B,OAAgBkB,EAAKP,MAAMqB,aAAgB,QAFhGd,EAAA,OAAAC,OAAAc,EAAA,EAAAd,CAAAJ,EAAAC,GAAAG,OAAAe,EAAA,EAAAf,CAAAJ,EAAA,EAAAT,IAAA,SAAAjB,MAAA,WAII,OACAmB,EAAA,qBAAKV,UAAU,UAAUqC,MAAO,CAACC,aAAc1B,KAAKoB,cAAcpB,KAAKC,MAAMyB,cAAgBC,UAAW3B,KAAKoB,cAAcpB,KAAKC,MAAM0B,aACrI3B,KAAKC,MAAME,cANhBE,EAAA,CAA6BD,kBCKdwB,SAJ6C,SAAAtD,GAA4C,IAA1CC,EAA0CD,EAA1CC,KAAMC,EAAoCF,EAApCE,SAAUG,EAA0BL,EAA1BK,MAAOkD,EAAmBvD,EAAnBuD,cACnF,OAAOhD,EAAAC,EAAAC,cAAA,SAAOC,cAAaT,EAAMA,KAAMA,EAAMI,MAAOA,EAAOmD,KAAK,OAAO7C,SAAU,SAAC8C,GAAD,OAAOF,EAAcE,EAAE5C,OAAOR,QAAQS,UAAU,YAAYC,GAAIb,MCHtIwD,SAAiC,SAAA1D,GAAoC,IAAlCE,EAAkCF,EAAlCE,SAAUC,EAAwBH,EAAxBG,SAAU0B,EAAc7B,EAAd6B,SAChE,OACEL,EAAA,wBAAQd,cAAaR,EAAUC,SAAUA,EAAUY,GAAIb,EAAUY,UAAU,gBACxEe,KCkEM8B,SA3DG,WAAY,IAAAC,EACZC,mBAAqCC,SAA5CC,EADmB5B,OAAA6B,EAAA,EAAA7B,CAAAyB,EAAA,MAAAK,EAEAJ,mBAAyB,CAAEK,MAAO,GAAIC,MAAO,GAAIC,QAAS,GAAIC,UAAW,GAAIC,UAAW,KAFxFC,EAAApC,OAAA6B,EAAA,EAAA7B,CAAA8B,EAAA,GAEnBO,EAFmBD,EAAA,GAEZE,EAFYF,EAAA,GAAAG,EAGFb,mBAAS,IAHPc,EAAAxC,OAAA6B,EAAA,EAAA7B,CAAAuC,EAAA,GAGnBE,EAHmBD,EAAA,GAGbE,EAHaF,EAAA,GAAAG,EAIQjB,oBAAS,GAJjBkB,EAAA5C,OAAA6B,EAAA,EAAA7B,CAAA2C,EAAA,GAInBE,EAJmBD,EAAA,GAIRE,EAJQF,EAAA,GAKpBxB,EAAgB,SAACjC,EAAajB,GAChCoE,EAAS,SAACS,GAAD,OAAA/C,OAAAgD,EAAA,EAAAhD,CAAA,GAAqC+C,EAArC/C,OAAAiD,EAAA,EAAAjD,CAAA,MAAAnB,OAAoDM,GAAQjB,OAGzEgF,oBAAU,YACS,eAAArF,EAAAmC,OAAAmD,EAAA,EAAAnD,CAAAoD,EAAA/E,EAAAgF,KAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAJ,EAAA/E,EAAAoF,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACIC,MAAMjC,GADV,cACR2B,EADQG,EAAAI,KAAAJ,EAAAE,KAAA,EAEKL,EAAIC,OAFT,OAERA,EAFQE,EAAAI,KAGdpB,EAAQc,GACRlB,EAAS,SAACS,GACN,IAAMb,EAAYsB,EAAKzE,IAAI,SAACgF,GAAD,OAAYA,EAAEhC,QAAOiC,OAChD,OAAOhE,OAAAgD,EAAA,EAAAhD,CAAA,GAAM+C,EAAb,CAAwBb,gBAE5BY,GAAa,GARC,wBAAAY,EAAAO,SAAAX,MAAH,yBAAAzF,EAAA6C,MAAAnB,KAAAY,YAAA,EAUf+D,IACD,CAACtC,IACJsB,oBAAU,WACN,IAAMiB,EAAkB1B,EAAOA,EAAK2B,KAAK,SAACL,GAAD,OAAYA,EAAEhC,QAAUM,EAAMN,QAAQ,GACzEI,EAAagC,EAAcA,EAAWE,OAAOL,OAAS,GAC5D1B,EAAS,SAACS,GAAD,OAAA/C,OAAAgD,EAAA,EAAAhD,CAAA,GAAqB+C,EAArB,CAAgCf,MAAO,GAAIG,iBACrD,CAACE,EAAMN,MAAOU,IACjB,IAKM6B,GAAajC,EAAMN,QAAUM,EAAML,QAAUK,EAAMJ,QACzD,OACI7D,EAAAC,EAAAC,cAACF,EAAAC,EAAMkG,SAAP,KACInG,EAAAC,EAAAC,cAAA,QAAMkG,SAAU,SAAClD,GAAD,OARP,SAACmD,GAAmB,IACzBzC,EAA0BK,EAA1BL,MAAOD,EAAmBM,EAAnBN,MAAOE,EAAYI,EAAZJ,QACtBwC,EAAUC,iBACVC,MAAMC,KAAKC,UAAU,CAAE7C,QAAOD,QAAOE,aAKVuC,CAASlD,KAC5BlD,EAAAC,EAAAC,cAACwG,EAAD9E,OAAA+E,OAAA,CAAS7D,WAAS,GA9Cd,WA+CA9C,EAAAC,EAAAC,cAAA,OAAKK,UAAU,kBAAf,cAEJP,EAAAC,EAAAC,cAACwG,EAAD9E,OAAA+E,OAAA,CAAS7D,WAAS,EAACD,cAAY,GAjD3B,WAkDC4B,GAAazE,EAAAC,EAAAC,cAAA,4BACdF,EAAAC,EAAAC,cAAC0G,EAAD,CAAOvF,KAAK,SAAS1B,SAAS,MAC1BK,EAAAC,EAAAC,cAAC2G,EAAD,CAAajH,SAAU6E,EAAW1E,QAASkE,EAAMH,UAAWpE,KAAK,KAAKI,MAAOmE,EAAMN,MAAOhE,SAAS,KAAKE,aAAc,SAACC,GAAD,OAAWkD,EAAc,QAASlD,OAE5JE,EAAAC,EAAAC,cAAC0G,EAAD,CAAOvF,KAAK,SAAS1B,SAAS,MAC1BK,EAAAC,EAAAC,cAAC2G,EAAD,CAAa9G,QAASkE,EAAMF,UAAWnE,SAA0B,KAAhBqE,EAAMN,OAAgBc,EAAW/E,KAAK,KAAKI,MAAOmE,EAAML,MAAOjE,SAAS,KAAKE,aAAc,SAACC,GAAD,OAAWkD,EAAc,QAASlD,OAElLE,EAAAC,EAAAC,cAAC0G,EAAD,CAAOvF,KAAK,WAAW1B,SAAS,KAC5BK,EAAAC,EAAAC,cAAC4G,EAAD,CAAWpH,KAAK,IAAII,MAAOmE,EAAMJ,QAASb,cAAe,SAACE,GAAD,OAxCvDpD,EAwC2EoD,EAxCzDgB,EAAS,SAACqB,GAAD,OAAA3D,OAAAgD,EAAA,EAAAhD,CAAA,GAAqB2D,EAArB,CAA2B1B,QAAS/D,MAAhE,IAACA,GAwC+EH,SAAS,QAGlGK,EAAAC,EAAAC,cAACwG,EAAD9E,OAAA+E,OAAA,CAAS9D,cAAY,GA7DjB,WA8DA7C,EAAAC,EAAAC,cAAC6G,EAAD,CAAQpH,SAAS,IAAIC,SAAUsG,GAAY,oBCzDhDc,EARc,WAC3B,OACEhH,EAAAC,EAAAC,cAAA,OAAKK,UAAU,OACfP,EAAAC,EAAAC,cAAC+G,EAAD,QCKgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxH,EAAAC,EAAAC,cAACuH,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a865662d.chunk.js","sourcesContent":["export default (function Utils() {\n    const e2eString = (str: string) => str.replace(/\\s+/g, '-').toLowerCase();\n    return {\n        e2eString\n    }\n})();\n","import React from 'react';\nimport './InputSelect.css'\nimport Utils from '../../utils/utils';\ninterface IInputSelectProps {\n  selector?: string;\n  disabled?: boolean;\n  onSelectItem: (evt: any) => void;\n  value?: string;\n  name: string;\n  options: Array<any>;\n}\n\nconst InputSelect: React.FunctionComponent<IInputSelectProps> = ({name, selector, disabled, onSelectItem, value, options}) => {\n  return <select data-testid={selector} name={name} value={value} onChange={(ev) => onSelectItem(ev.target.value)} disabled={disabled} className=\"InputSelect\" id={selector}>\n  <option data-testid={`${selector}-option-null`} value=\"\">- Select Option -</option>\n  {(options && options.length > 0) && options.map(((option, index) => (\n    <option data-testid={`${selector}-option-${Utils.e2eString(option)}`} key={index} value={option}>{option}</option>\n  )))}\n\n  </select>;\n};\n\nexport default InputSelect;","import * as React from 'react';\nimport './FormLabel.css';\n\nexport interface ILabelProps {\n    text?: string;\n    selector?: string;\n}\n\nexport default class Label extends React.PureComponent<ILabelProps, any> {\n  public render() {\n    return (\n      <React.Fragment>\n        <label className=\"FormLabel\" htmlFor={this.props.selector}>\n        <strong>{this.props.text}</strong>\n        </label>\n        {this.props.children}\n      </React.Fragment>\n    );\n  }\n}\n","import * as React from 'react';\nimport './FormBox.css'\ninterface IFormBoxProps {\n    borderBottom?: boolean;\n    borderTop?: boolean;\n    borderColor?: string;\n}\n\nexport class FormBox extends React.PureComponent<IFormBoxProps> {\n\n    displayBorder = (addBorder: boolean) => addBorder ? `1px solid ${this.props.borderColor!}`: 'none';\n  public render() {\n    return (\n    <div className=\"FormBox\" style={{borderBottom: this.displayBorder(this.props.borderBottom!), borderTop: this.displayBorder(this.props.borderTop!)}}>\n    {this.props.children}\n    </div>\n    );\n  }\n}\n","import React from 'react';\nimport './InputText.css'\ninterface IInputTextProps {\n  selector?: string;\n  value?: string;\n  onChangeValue: (ev: any) => void;\n  name: string;\n}\n\nconst InputText: React.FunctionComponent<IInputTextProps> = ({name, selector, value, onChangeValue}) => {\n  return <input data-testid={name} name={name} value={value} type=\"text\" onChange={(e) => onChangeValue(e.target.value)} className=\"InputText\" id={selector}/>;\n};\n\nexport default InputText;","import * as React from 'react';\nimport './Button.css';\ninterface IButtonProps {\n  selector: string;\n  disabled: boolean;\n}\n\nexport const Button: React.FC<IButtonProps> = ({selector, disabled, children}) => {\n    return (\n      <button data-testid={selector} disabled={disabled} id={selector} className=\"buttonSearch\">\n        {children}\n      </button>\n    );\n};\n","import React, { useState, useEffect } from 'react';\nimport InputSelect from '../inputSelect/InputSelect';\nimport Label from '../formLabel/FormLabel';\nimport { FormBox } from '../formBox/FormBox';\nimport InputText from '../inputText/InputText';\nimport { Button } from '../button/Button';\nimport './SearchBox.css';\nconst borderColor = '#979797';\n\ninterface SearchBoxState {\n    brand: string;\n    model: string;\n    keyword: string;\n    brandList: Array<string>;\n    modelList: Array<string>;\n}\n\nconst SearchBox = function () {\n    const [url] = useState(process.env.REACT_APP_URL ? process.env.REACT_APP_URL : 'http://localhost:3000/cars');\n    const [state, setState] = useState<SearchBoxState>({ brand: '', model: '', keyword: '', brandList: [], modelList: [] });\n    const [data, setData] = useState([]);\n    const [isLoading, setIsLoading] = useState(true);\n    const onChangeValue = (key: string, value: string) => {\n        setState((prevState: SearchBoxState) => ({ ...prevState, [`${key}`]: value }));\n    }\n    const onChangeText = (value: string) => setState((prev: any) => ({ ...prev, keyword: value }));\n    useEffect(() => {\n        const fetchData = async () => {\n            const res = await fetch(url);\n            const json = await res.json();\n            setData(json);\n            setState((prevState) => {\n                const brandList = json.map((x: any) => x.brand).sort();\n                return ({ ...prevState, brandList })\n            });\n            setIsLoading(false);\n        }\n        fetchData();\n    }, [url]);\n    useEffect(() => {\n        const findModels: any = data ? data.find((x: any) => x.brand === state.brand): [];\n        const modelList = (findModels) ? findModels.models.sort() : [];\n        setState((prevState) => ({ ...prevState, model: '', modelList }))\n    }, [state.brand, data]);\n    const onSubmit = (formEvent: any) => {\n        const { model, brand, keyword } = state\n        formEvent.preventDefault();\n        alert(JSON.stringify({ model, brand, keyword }));\n    }\n    const validForm = !state.brand && !state.model && !state.keyword;\n    return (\n        <React.Fragment>\n            <form onSubmit={(e) => onSubmit(e)}>\n                <FormBox borderTop {...borderColor}>\n                    <div className=\"searchBoxTitle\">Buy a car</div>\n                </FormBox>\n                <FormBox borderTop borderBottom {...borderColor}>\n                    {isLoading && <strong>Loading...</strong>}\n                    <Label text='Brand:' selector=\"s1\">\n                        <InputSelect disabled={isLoading} options={state.brandList} name=\"S1\" value={state.brand} selector=\"S1\" onSelectItem={(value) => onChangeValue('brand', value)} />\n                    </Label>\n                    <Label text='Model:' selector=\"s2\">\n                        <InputSelect options={state.modelList} disabled={state.brand === '' || isLoading} name=\"S2\" value={state.model} selector=\"S2\" onSelectItem={(value) => onChangeValue('model', value)} />\n                    </Label>\n                    <Label text='Keyword:' selector=\"T\">\n                        <InputText name=\"T\" value={state.keyword} onChangeValue={(e) => onChangeText(e)} selector=\"T\" />\n                    </Label>\n                </FormBox>\n                <FormBox borderBottom {...borderColor}>\n                    <Button selector=\"B\" disabled={validForm}>{'Search Cars'}</Button>\n                </FormBox>\n            </form>\n        </React.Fragment>\n    )\n}\n\nexport default SearchBox;\n\n","import React from 'react';\nimport './App.css';\nimport SearchBox from './componets/searchBox/SearchBox';\n\nconst SearchForm: React.FC = () => {\n  return (\n    <div className=\"App\">\n    <SearchBox/>\n    </div>\n  );\n}\n\nexport default SearchForm;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}